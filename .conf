server {
        listen 80;
        #listen [::]:80;

        root /var/www/html/jitwilaitour/api;
        index index.php index.html index.htm;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        # Make site accessible from http://localhost/
        server_name  api.probookingcenter.com;
        server_tokens off;

        access_log  /var/log/nginx/jitwilaitour_api_access.log  main;
        error_log  /var/log/nginx/jitwilaitour_api_error.log;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                # try_files $uri $uri/ =404;
                # try_files $uri $uri/ /index.php?$query_string;
                try_files $uri $uri/ /index.php?$args;
                # Uncomment to enable naxsi on this location
                # include /etc/nginx/naxsi.rules
        }


        location ~* \.(eot|svg|ttf|woff|woff2)$ {
            add_header Access-Control-Allow-Origin *;
        }

        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
            fastcgi_pass   127.0.0.1:9000;
            #fastcgi_pass unix:/var/run/php5-fpm.sock;
            try_files $uri =404;
            # fastcgi_read_timeout 300;
            # fastcgi_buffers 16 16k; 
            # fastcgi_buffer_size 32k;
fastcgi_buffers 256 48k;
fastcgi_buffer_size 48k;
fastcgi_connect_timeout 15s;
fastcgi_send_timeout 15s;
fastcgi_read_timeout 15s;
fastcgi_busy_buffers_size 256k;
 #fastcgi_temp_file_write_size 256k;
fastcgi_max_temp_file_size 0;
reset_timedout_connection on;
 #server_names_hash_bucket_size 100;
proxy_buffers 8 16k;
proxy_buffer_size 32k;

        }

        location ~ /\.(ht|svn|git) {
            deny all;
        }

    listen 443 ssl;


    ssl on;
    ssl_certificate /etc/nginx/ssl/probookingcenter.com.chained.crt;
    ssl_certificate_key /etc/nginx/ssl/probookingcenter.com.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }


}
